// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.12.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == "string")
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    }, LateError: function LateError(t0) {
      this.__internal$_message = t0;
    }, Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        if (H.Primitives__saneNativeClassName(dispatchName))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.Primitives__saneNativeClassName(constructorName))
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1 = $name !== "Object" && $name !== "";
      return t1;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, defaultValue, used, key,
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[H._asString(keys[_i])];
            if (C.C__Required === defaultValue)
              return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            C.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            key = H._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (C.C__Required === defaultValue)
                return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              C.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$as(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$as(indexable);
      if (index < 0 || index >= $length)
        return new P.IndexError($length, true, index, _s5_, "Index out of range");
      return new P.RangeError(null, null, true, index, _s5_, "Value not in range");
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        return new Function("return function(){var " + selfName + " = this." + H.BoundClosure_selfFieldName() + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      return new Function("return function(" + $arguments + "){return this." + H.BoundClosure_selfFieldName() + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(new H.LateError($name));
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _.__js_helper$_name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    _installSpecializedIsTest: function(object) {
      var t1, unstarred, isFn, testRti = this;
      if (testRti === type$.Object)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, testRti = this,
        asFn = H._generalAsCheckImplementation;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else {
        t1 = H.isNullable(testRti);
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = H.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + H._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (t4 < 0)
            return H.ioore(genericContext, t4);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + H._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + H._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + H._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += H._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(H._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(H._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = H._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(H._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(H._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(H._Universe__lookupStarRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(H._Universe__lookupQuestionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(H._Universe__lookupFutureOrRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(H._Universe__lookupFunctionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || H._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[J.JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, J.JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JS_INTEROP_INTERCEPTOR_TAG: function() {
      var t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
      return t1 == null ? $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js") : t1;
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$as: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$length$as: function(receiver) {
      return J.getInterceptor$as(receiver).get$length(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$from: function(elements, $E) {
      var t1, _i,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        C.JSArray_methods.add$1(list, $E._as(elements[_i]));
      return list;
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var t1 = H._arrayInstanceType(objects),
        iterator = new J.ArrayIterator(objects, objects.length, t1._eval$1("ArrayIterator<1>"));
      if (!iterator.moveNext$0())
        return string;
      t1 = t1._precomputed1;
      if (separator.length === 0) {
        do
          string += H.S(t1._as(iterator._current));
        while (iterator.moveNext$0());
      } else {
        string += H.S(t1._as(iterator._current));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(t1._as(iterator._current));
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      type$.Function._as(callback);
      return H.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop: function(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(P._convertDartFunctionFast(f));
    }
  },
  W = {DomException: function DomException() {
    }},
  N = {
    initializeRootNode: function(width, height) {
      var t1, t2;
      H._asInt(width);
      H._asInt(height);
      t1 = $.$get$lucid().rootNode;
      t1.set$overflow(C.Overflow_0);
      t1._width = width;
      t1._height = height;
      t2 = t1._calculatedRelativeBoundingRect;
      t2.endX = width;
      t2.endY = height;
      t2 = t1._calculatedAbsoluteBoundingRect;
      t2.endX = width;
      t2.endY = height;
      t2 = t1._calculatedAbsoluteClippingRect;
      t2.endX = width;
      t2.endY = height;
      t2 = t1._calculatedAbsoluteViewportRect;
      t2.startX = t1._border_left;
      t2.startY = t1._border_top;
      t2.endX = width - t1._border_right;
      t2.endY = height - t1._border_bottom;
      t1.id = 0;
      C.JSArray_methods.add$1($.elements, t1);
      return 0;
    },
    addChild: function($parent) {
      var id, child, t1;
      H._asInt($parent);
      id = $.elements.length;
      child = K.LTelementNode$(C.Display_1, id);
      C.JSArray_methods.add$1($.elements, child);
      if ($parent < 0 || $parent >= $.elements.length)
        return H.ioore($.elements, $parent);
      t1 = $.elements[$parent];
      C.JSArray_methods.add$1(t1._children, child);
      child.set$parent(t1);
      t1.stageToUpdate = 0;
      return id;
    },
    removeChild: function(id) {
      var child;
      H._asInt(id);
      child = K.LTelementNode$(C.Display_1, id);
      child.parent.removeChild$1(child);
      C.JSArray_methods.$indexSet($.elements, id, null);
    },
    setDisplay: function(id, disp) {
      var t1, t2;
      H._asInt(id);
      H._asInt(disp);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (disp < 0 || disp >= 3)
        return H.ioore(C.List_8eb, disp);
      t2 = C.List_8eb[disp];
      t1.stageToUpdate = 0;
      t1._display = t2;
    },
    getDisplay: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._display.index;
    },
    setPosition: function(id, ps) {
      var t1, t2;
      H._asInt(id);
      H._asInt(ps);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (ps < 0 || ps >= 3)
        return H.ioore(C.List_kyy, ps);
      t2 = C.List_kyy[ps];
      t1.stageToUpdate = 0;
      t1._position = t2;
    },
    getPosition: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._position.index;
    },
    setWidth: function(id, w) {
      var t1;
      H._asInt(id);
      H._asInt(w);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._width = w;
    },
    getWidth: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._width;
    },
    setMinWidth: function(id, mw) {
      var t1;
      H._asInt(id);
      H._asInt(mw);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._minWidth = mw;
    },
    getMinWidth: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._minWidth;
    },
    setMaxWidth: function(id, mw) {
      var t1;
      H._asInt(id);
      H._asInt(mw);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._maxWidth = mw;
    },
    getMaxWidth: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._maxWidth;
    },
    setHeight: function(id, h) {
      var t1;
      H._asInt(id);
      H._asInt(h);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._height = h;
    },
    getHeight: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._height;
    },
    setMinHeight: function(id, mh) {
      var t1;
      H._asInt(id);
      H._asInt(mh);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._minHeight = mh;
    },
    getMinHeight: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._minHeight;
    },
    setMaxHeight: function(id, mh) {
      var t1;
      H._asInt(id);
      H._asInt(mh);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._maxHeight = mh;
    },
    getMaxHeight: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._maxHeight;
    },
    setLine_height: function(id, lh) {
      var t1;
      H._asInt(id);
      H._asInt(lh);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._line_height = lh;
    },
    getLine_height: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._line_height;
    },
    setBorder_top: function(id, bt) {
      var t1;
      H._asInt(id);
      H._asInt(bt);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._border_top = bt;
    },
    getBorder_top: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._border_top;
    },
    setBorder_right: function(id, br) {
      var t1;
      H._asInt(id);
      H._asInt(br);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._border_right = br;
    },
    getBorder_right: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._border_right;
    },
    setBorder_bottom: function(id, bb) {
      var t1;
      H._asInt(id);
      H._asInt(bb);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._border_bottom = bb;
    },
    getBorder_bottom: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._border_bottom;
    },
    setBorder_left: function(id, bl) {
      var t1;
      H._asInt(id);
      H._asInt(bl);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._border_left = bl;
    },
    getBorder_left: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._border_left;
    },
    setMargin_top: function(id, mt) {
      var t1;
      H._asInt(id);
      H._asInt(mt);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._margin_top = mt;
    },
    getMargin_top: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._margin_top;
    },
    setMargin_right: function(id, mr) {
      var t1;
      H._asInt(id);
      H._asInt(mr);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._margin_right = mr;
    },
    getMargin_right: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._margin_right;
    },
    setMargin_bottom: function(id, mb) {
      var t1;
      H._asInt(id);
      H._asInt(mb);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._margin_bottom = mb;
    },
    getMargin_bottom: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._margin_bottom;
    },
    setMargin_left: function(id, ml) {
      var t1;
      H._asInt(id);
      H._asInt(ml);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._margin_left = ml;
    },
    getMargin_left: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._margin_left;
    },
    setPadding_top: function(id, pt) {
      var t1;
      H._asInt(id);
      H._asInt(pt);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._padding_top = pt;
    },
    getPadding_top: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._padding_top;
    },
    setPadding_right: function(id, pr) {
      var t1;
      H._asInt(id);
      H._asInt(pr);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._padding_right = pr;
    },
    getPadding_right: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._padding_right;
    },
    setPadding_bottom: function(id, pb) {
      var t1;
      H._asInt(id);
      H._asInt(pb);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 2));
      t1._padding_bottom = pb;
    },
    getPadding_bottom: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._padding_bottom;
    },
    setPadding_left: function(id, pl) {
      var t1;
      H._asInt(id);
      H._asInt(pl);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._padding_left = pl;
    },
    getPadding_left: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._padding_left;
    },
    setLeft: function(id, l) {
      var t1, t2, t3;
      H._asInt(id);
      H._asInt(l);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t2 = t1._position !== C.Position_0 && t1._right != null;
      t3 = t1.stageToUpdate;
      if (t2)
        t1.set$stageToUpdate(Math.min(t3, 1));
      else
        t1.set$stageToUpdate(Math.min(t3, 3));
      t1._left = l;
    },
    getLeft: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._left;
    },
    setTop: function(id, t) {
      var t1;
      H._asInt(id);
      H._asInt(t);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 3));
      t1._top = t;
    },
    getTop: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._top;
    },
    setRight: function(id, r) {
      var t1, t2, t3;
      H._asInt(id);
      H._asInt(r);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t2 = t1._left;
      t3 = t1.stageToUpdate;
      if (t2 != null)
        t1.set$stageToUpdate(Math.min(t3, 1));
      else
        t1.set$stageToUpdate(Math.min(t3, 3));
      t1._right = r;
    },
    getRight: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._right;
    },
    setBottom: function(id, b) {
      var t1;
      H._asInt(id);
      H._asInt(b);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 3));
      t1._bottom = b;
    },
    getBottom: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._bottom;
    },
    setWrap: function(id, wp) {
      var t1;
      H._asInt(id);
      H._asBool(wp);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._wrap = wp;
    },
    getWrap: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._wrap;
    },
    setFit_content: function(id, fc) {
      var t1;
      H._asInt(id);
      H._asBool(fc);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.stageToUpdate = 0;
      t1._fit_content = fc;
    },
    getFit_content: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._fit_content;
    },
    setOverflow: function(id, ov) {
      var t1;
      H._asInt(id);
      H._asInt(ov);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (ov < 0 || ov >= 3)
        return H.ioore(C.List_oGx, ov);
      t1.set$overflow(C.List_oGx[ov]);
    },
    getOverflow: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._overflow.index;
    },
    setAlignTracks: function(id, at) {
      var t1, t2;
      H._asInt(id);
      H._asInt(at);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (at < 0 || at >= 4)
        return H.ioore(C.List_90K, at);
      t2 = C.List_90K[at];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 3));
      t1._alignTracks = t2;
    },
    getAlignTracks: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._alignTracks.index;
    },
    setAlignItems: function(id, ai) {
      var t1, t2;
      H._asInt(id);
      H._asInt(ai);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (ai < 0 || ai >= 4)
        return H.ioore(C.List_90K, ai);
      t2 = C.List_90K[ai];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 3));
      t1._alignItems = t2;
    },
    getAlignItems: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._alignItems.index;
    },
    setAlignSelf: function(id, asl) {
      var t1, t2;
      H._asInt(id);
      H._asInt(asl);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t1 = $.elements[id];
      t1.toString;
      if (asl < 0 || asl >= 4)
        return H.ioore(C.List_90K, asl);
      t2 = C.List_90K[asl];
      t1.set$stageToUpdate(Math.min(t1.stageToUpdate, 3));
      t1._alignSelf = t2;
    },
    getAlignSelf: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._alignSelf.index;
    },
    initializeLayout: function() {
      $.$get$lucid().initializeLayout$0();
    },
    reflowAt: function(id) {
      var t1, t2;
      H._asInt(id);
      t1 = $.$get$lucid();
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      t2 = $.elements[id];
      t2.toString;
      t1.reflowAt$1(t2);
    },
    getCalculatedWidth: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._calculatedWidth;
    },
    getCalculatedHeight: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      return $.elements[id]._calculatedHeight;
    },
    getCalculatedBoundingRect: function(id) {
      var object, rect;
      H._asInt(id);
      object = {};
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      rect = $.elements[id]._calculatedAbsoluteBoundingRect;
      object.startX = rect.startX;
      object.endX = rect.endX;
      object.startY = rect.startY;
      object.endY = rect.endY;
      return object;
    },
    inspectRecursive: function(id) {
      H._asInt(id);
      if (id < 0 || id >= $.elements.length)
        return H.ioore($.elements, id);
      $.elements[id].traverseDown$1(new N.inspectRecursive_closure());
    },
    inspectRecursive_closure: function inspectRecursive_closure() {
    }
  },
  X = {Rect: function Rect(t0, t1, t2, t3) {
      var _ = this;
      _.startX = t0;
      _.startY = t1;
      _.endX = t2;
      _.endY = t3;
    }},
  K = {
    LTelementNode$: function(disp, id) {
      return new K.LTelementNode(id, H.setRuntimeTypeInfo([], type$.JSArray_LTelementNode), disp, C.Position_0, C.Overflow_0, C.Alignment_0, C.Alignment_0, C.Alignment_0, new X.Rect(0, 0, 0, 0), new X.Rect(0, 0, 0, 0), new X.Rect(0, 0, 0, 0), new X.Rect(0, 0, 0, 0), H.setRuntimeTypeInfo([], type$.JSArray_LTblockElementRow));
    },
    LTelementNode_traverseUpTill: function(nodes, callBack, endPred) {
      var t1, _i, node, $parent, t2, grandparent,
        ret = H.setRuntimeTypeInfo([], type$.JSArray_nullable_LTelementNode);
      for (t1 = nodes.length, _i = 0; _i < nodes.length; nodes.length === t1 || (0, H.throwConcurrentModificationError)(nodes), ++_i) {
        node = nodes[_i];
        callBack.call$1(node);
        $parent = node.parent;
        if ($parent != null) {
          if ($parent.get$_hasLastArrived())
            for (; true; $parent = grandparent) {
              t2 = H.boolConversionCheck(endPred.call$1($parent));
              if (t2)
                callBack.call$1($parent);
              else
                C.JSArray_methods.add$1(ret, $parent);
              grandparent = $parent.parent;
              if (grandparent != null) {
                if (!grandparent.get$_hasLastArrived())
                  break;
              } else {
                C.JSArray_methods.add$1(ret, $parent);
                break;
              }
            }
        } else
          C.JSArray_methods.add$1(ret, $parent);
      }
      return ret;
    },
    LTelementNode: function LTelementNode(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.id = t0;
      _.parent = null;
      _.stageToUpdate = 0;
      _._children = t1;
      _._display = t2;
      _._position = t3;
      _._width = null;
      _._minWidth = 0;
      _._maxWidth = 4294967295;
      _._height = null;
      _._minHeight = 0;
      _._maxHeight = 4294967295;
      _._padding_left = _._padding_bottom = _._padding_right = _._padding_top = _._margin_left = _._margin_bottom = _._margin_right = _._margin_top = _._border_left = _._border_bottom = _._border_right = _._border_top = _._line_height = 0;
      _._bottom = _._right = _._top = _._left = null;
      _._fit_content = _._wrap = true;
      _._overflow = t4;
      _._alignTracks = t5;
      _._alignItems = t6;
      _._alignSelf = t7;
      _._fillRowWidth = true;
      _._calculatedRowHeightSum = _._calculatedHeight = _._calculatedWidth = 0;
      _._calculatedRelativeBoundingRect = t8;
      _._calculatedAbsoluteBoundingRect = t9;
      _._calculatedAbsoluteClippingRect = t10;
      _._calculatedAbsoluteViewportRect = t11;
      _._rowWidth = _._calculatedLines = 0;
      _._rows = t12;
      _._arrivedTraces = 0;
    },
    LTelementNode__calculateLayoutFixedStage1_closure: function LTelementNode__calculateLayoutFixedStage1_closure() {
    },
    LTelementNode__calculateLayoutFixedStage1_closure0: function LTelementNode__calculateLayoutFixedStage1_closure0() {
    },
    LTblockElementRow: function LTblockElementRow(t0, t1, t2, t3) {
      var _ = this;
      _.height = 0;
      _.restWidth = t0;
      _.freeWidth = t1;
      _.children = t2;
      _.freeNode = t3;
    }
  },
  E = {Display: function Display(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, Position: function Position(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, Overflow: function Overflow(t0, t1) {
      this.index = t0;
      this._name = t1;
    }, Alignment: function Alignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    }},
  T = {Lucid: function Lucid(t0) {
      this.rootNode = t0;
    }, Lucid_reflowAt_closure: function Lucid_reflowAt_closure() {
    }, Lucid_reflowAt_closure0: function Lucid_reflowAt_closure0() {
    }, Lucid_reflowAt_closure1: function Lucid_reflowAt_closure1() {
    }, Lucid_reflowAt_closure2: function Lucid_reflowAt_closure2(t0) {
      this._box_0 = t0;
    }, Lucid_reflowAt_closure3: function Lucid_reflowAt_closure3() {
    }, Lucid_reflowAt_closure4: function Lucid_reflowAt_closure4() {
    }, Lucid_reflowAt_closure5: function Lucid_reflowAt_closure5() {
    }, Lucid_initializeLayout_closure: function Lucid_initializeLayout_closure() {
    }, Lucid_initializeLayout_closure0: function Lucid_initializeLayout_closure0() {
    }, Lucid_initializeLayout_closure1: function Lucid_initializeLayout_closure1() {
    }, Lucid_initializeLayout_closure2: function Lucid_initializeLayout_closure2() {
    }, Lucid_initializeLayout_closure3: function Lucid_initializeLayout_closure3() {
    }, Lucid_initializeLayout_closure4: function Lucid_initializeLayout_closure4() {
    }, Lucid_initializeLayout_closure5: function Lucid_initializeLayout_closure5() {
    }},
  L = {
    main: function() {
      var t1, t2, t3, t4;
      self.initializeRootNode = P.allowInterop(N.jsInternal__initializeRootNode$closure(), type$.int_Function_int_int);
      t1 = type$.int_Function_int;
      self.addChild = P.allowInterop(N.jsInternal__addChild$closure(), t1);
      t2 = type$.void_Function_int;
      self.removeChild = P.allowInterop(N.jsInternal__removeChild$closure(), t2);
      t3 = type$.void_Function_int_int;
      self.setDisplay = P.allowInterop(N.jsInternal__setDisplay$closure(), t3);
      self.setPosition = P.allowInterop(N.jsInternal__setPosition$closure(), t3);
      self.setWidth = P.allowInterop(N.jsInternal__setWidth$closure(), t3);
      self.setMinWidth = P.allowInterop(N.jsInternal__setMinWidth$closure(), t3);
      self.setMaxWidth = P.allowInterop(N.jsInternal__setMaxWidth$closure(), t3);
      self.setHeight = P.allowInterop(N.jsInternal__setHeight$closure(), t3);
      self.setMinHeight = P.allowInterop(N.jsInternal__setMinHeight$closure(), t3);
      self.setMaxHeight = P.allowInterop(N.jsInternal__setMaxHeight$closure(), t3);
      self.setLine_height = P.allowInterop(N.jsInternal__setLine_height$closure(), t3);
      self.setBorder_top = P.allowInterop(N.jsInternal__setBorder_top$closure(), t3);
      self.setBorder_right = P.allowInterop(N.jsInternal__setBorder_right$closure(), t3);
      self.setBorder_bottom = P.allowInterop(N.jsInternal__setBorder_bottom$closure(), t3);
      self.setBorder_left = P.allowInterop(N.jsInternal__setBorder_left$closure(), t3);
      self.setMargin_top = P.allowInterop(N.jsInternal__setMargin_top$closure(), t3);
      self.setMargin_right = P.allowInterop(N.jsInternal__setMargin_right$closure(), t3);
      self.setMargin_bottom = P.allowInterop(N.jsInternal__setMargin_bottom$closure(), t3);
      self.setMargin_left = P.allowInterop(N.jsInternal__setMargin_left$closure(), t3);
      self.setPadding_top = P.allowInterop(N.jsInternal__setPadding_top$closure(), t3);
      self.setPadding_right = P.allowInterop(N.jsInternal__setPadding_right$closure(), t3);
      self.setPadding_bottom = P.allowInterop(N.jsInternal__setPadding_bottom$closure(), t3);
      self.setPadding_left = P.allowInterop(N.jsInternal__setPadding_left$closure(), t3);
      self.setLeft = P.allowInterop(N.jsInternal__setLeft$closure(), t3);
      self.setTop = P.allowInterop(N.jsInternal__setTop$closure(), t3);
      self.setRight = P.allowInterop(N.jsInternal__setRight$closure(), t3);
      self.setBottom = P.allowInterop(N.jsInternal__setBottom$closure(), t3);
      t4 = type$.void_Function_int_bool;
      self.setWrap = P.allowInterop(N.jsInternal__setWrap$closure(), t4);
      self.setFit_content = P.allowInterop(N.jsInternal__setFit_content$closure(), t4);
      self.setOverflow = P.allowInterop(N.jsInternal__setOverflow$closure(), t3);
      self.setAlignTracks = P.allowInterop(N.jsInternal__setAlignTracks$closure(), t3);
      self.setAlignItems = P.allowInterop(N.jsInternal__setAlignItems$closure(), t3);
      self.setAlignSelf = P.allowInterop(N.jsInternal__setAlignSelf$closure(), t3);
      self.getDisplay = P.allowInterop(N.jsInternal__getDisplay$closure(), t1);
      self.getPosition = P.allowInterop(N.jsInternal__getPosition$closure(), t1);
      t3 = type$.nullable_int_Function_int;
      self.getWidth = P.allowInterop(N.jsInternal__getWidth$closure(), t3);
      self.getMinWidth = P.allowInterop(N.jsInternal__getMinWidth$closure(), t1);
      self.getMaxWidth = P.allowInterop(N.jsInternal__getMaxWidth$closure(), t1);
      self.getHeight = P.allowInterop(N.jsInternal__getHeight$closure(), t3);
      self.getMinHeight = P.allowInterop(N.jsInternal__getMinHeight$closure(), t1);
      self.getMaxHeight = P.allowInterop(N.jsInternal__getMaxHeight$closure(), t1);
      self.getLine_height = P.allowInterop(N.jsInternal__getLine_height$closure(), t1);
      self.getBorder_top = P.allowInterop(N.jsInternal__getBorder_top$closure(), t1);
      self.getBorder_right = P.allowInterop(N.jsInternal__getBorder_right$closure(), t1);
      self.getBorder_bottom = P.allowInterop(N.jsInternal__getBorder_bottom$closure(), t1);
      self.getBorder_left = P.allowInterop(N.jsInternal__getBorder_left$closure(), t1);
      self.getMargin_top = P.allowInterop(N.jsInternal__getMargin_top$closure(), t1);
      self.getMargin_right = P.allowInterop(N.jsInternal__getMargin_right$closure(), t1);
      self.getMargin_bottom = P.allowInterop(N.jsInternal__getMargin_bottom$closure(), t1);
      self.getMargin_left = P.allowInterop(N.jsInternal__getMargin_left$closure(), t1);
      self.getPadding_top = P.allowInterop(N.jsInternal__getPadding_top$closure(), t1);
      self.getPadding_right = P.allowInterop(N.jsInternal__getPadding_right$closure(), t1);
      self.getPadding_bottom = P.allowInterop(N.jsInternal__getPadding_bottom$closure(), t1);
      self.getPadding_left = P.allowInterop(N.jsInternal__getPadding_left$closure(), t1);
      self.getLeft = P.allowInterop(N.jsInternal__getLeft$closure(), t3);
      self.getTop = P.allowInterop(N.jsInternal__getTop$closure(), t3);
      self.getRight = P.allowInterop(N.jsInternal__getRight$closure(), t3);
      self.getBottom = P.allowInterop(N.jsInternal__getBottom$closure(), t3);
      t3 = type$.bool_Function_int;
      self.getWrap = P.allowInterop(N.jsInternal__getWrap$closure(), t3);
      self.getFit_content = P.allowInterop(N.jsInternal__getFit_content$closure(), t3);
      self.getOverflow = P.allowInterop(N.jsInternal__getOverflow$closure(), t1);
      self.getAlignTracks = P.allowInterop(N.jsInternal__getAlignTracks$closure(), t1);
      self.getAlignItems = P.allowInterop(N.jsInternal__getAlignItems$closure(), t1);
      self.getAlignSelf = P.allowInterop(N.jsInternal__getAlignSelf$closure(), t1);
      self.initializeLayout = P.allowInterop(N.jsInternal__initializeLayout$closure(), type$.void_Function);
      self.reflowAt = P.allowInterop(N.jsInternal__reflowAt$closure(), t2);
      self.getCalculatedWidth = P.allowInterop(N.jsInternal__getCalculatedWidth$closure(), t1);
      self.getCalculatedHeight = P.allowInterop(N.jsInternal__getCalculatedHeight$closure(), t1);
      self.getCalculatedBoundingRect = P.allowInterop(N.jsInternal__getCalculatedBoundingRect$closure(), type$.Object_Function_int);
      self.inspectRecursive = P.allowInterop(N.jsInternal__inspectRecursive$closure(), t2);
    }
  };
  var holders = [C, H, J, P, W, N, X, K, E, T, L];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      this._addAllFromArray$1(receiver, collection);
      return;
    },
    _addAllFromArray$1: function(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $indexSet: function(receiver, index, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = C.JSInt_methods.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    $add: function(receiver, other) {
      return receiver + other;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isString: 1
  };
  H.LateError.prototype = {
    toString$0: function(_) {
      var t1 = "LateInitializationError: " + this.__internal$_message;
      return t1;
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    _fetch$1: function(key) {
      return this._jsObject[H._asString(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, t1._as(this._fetch$1(key)));
      }
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol(t3), t2[t4]);
      }
      return new H.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 8
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(type$.Object._as(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H._Required.prototype = {};
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(key) {
      var strings = this._strings;
      if (strings == null)
        return false;
      return this._containsTableEntry$2(strings, key);
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = this._getTableBucket$2(rest, J.get$hashCode$(key) & 0x3ffffff);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = J.get$hashCode$(key) & 0x3ffffff;
        bucket = _this._getTableBucket$2(rest, hash);
        if (bucket == null)
          _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this._newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 9
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 10
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asString(tag));
    },
    $signature: 11
  };
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Error.prototype = {
    toString$0: function(_) {
      return this._message;
    }
  };
  H._TypeError.prototype = {};
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 12
  };
  P.MapMixin.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._UnmodifiableMapMixin.prototype = {};
  P.MapView.prototype = {
    forEach$1: function(_, action) {
      this._map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this._map);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 13
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + _this._core$_memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      type$.Invocation._as(invocation);
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  N.inspectRecursive_closure.prototype = {
    call$1: function(node) {
      H.printString("id: " + H.S(node.id) + ", left: " + node._calculatedAbsoluteBoundingRect.toString$0(0));
      return null;
    },
    $signature: 2
  };
  X.Rect.prototype = {
    toString$0: function(_) {
      var _this = this;
      return "Rect(left: " + _this.startX + ", top: " + _this.startY + ", right: " + _this.endX + ", bottom: " + _this.endY + ")";
    }
  };
  K.LTelementNode.prototype = {
    set$overflow: function(ov) {
      this.set$stageToUpdate(Math.min(this.stageToUpdate, 4));
      this._overflow = ov;
    },
    _calculateRowWidth$0: function() {
      var t1, t2, t3, ret, _i, node, currentWidth, _this = this;
      for (t1 = _this._children, t2 = t1.length, t3 = _this._wrap, ret = 0, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        if (node._position !== C.Position_0)
          continue;
        currentWidth = node._calculatedWidth + node._margin_left + node._margin_right;
        if (t3)
          ret = Math.max(ret, currentWidth);
        else if (node._display === C.Display_0)
          ret = Math.max(Math.max(ret, 0), currentWidth);
      }
      t1 = _this._width;
      return t1 != null ? Math.max(ret, t1 - _this._padding_left - _this._padding_right - _this._border_left - _this._border_right) : ret;
    },
    _calculateWidthStage0$0: function() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this._width;
      if (t1 != null) {
        _this._fillRowWidth = false;
        return t1;
      }
      if (_this._display === C.Display_2) {
        if (_this._wrap)
          return 0;
        return 0;
      }
      t1 = _this._rowWidth;
      t2 = _this._padding_left;
      t3 = _this._padding_right;
      t4 = _this._border_left;
      t5 = _this._border_right;
      _this._fillRowWidth = !_this._fit_content;
      return C.JSInt_methods.clamp$2(t1 + t2 + t3 + t4 + t5, _this._minWidth, _this._maxWidth);
    },
    _calculateLayoutFixedStage1$0: function() {
      var root, t3, _this = this,
        rect = _this._calculatedAbsoluteBoundingRect,
        t1 = _this._left,
        t2 = t1 != null;
      if (t2)
        rect.startX = t1;
      t1 = _this._right;
      if (t1 != null) {
        if (t2) {
          root = _this.traceUpTill$1(new K.LTelementNode__calculateLayoutFixedStage1_closure());
          t1 = root._width;
          t1.toString;
          t2 = _this._left;
          t2.toString;
          t3 = _this._right;
          t3.toString;
          _this._calculatedWidth = t1 - t2 - t3;
          t1 = t3;
        } else {
          rect.startX = rect.endX - _this._calculatedWidth;
          root = null;
        }
        t2 = root._width;
        t2.toString;
        rect.endX = t2 - t1;
      } else {
        rect.endX = rect.startX + _this._calculatedWidth;
        root = null;
      }
      t1 = _this._top;
      if (t1 != null) {
        rect.startY = t1;
        if (_this._bottom != null) {
          t1 = (root == null ? _this.traceUpTill$1(new K.LTelementNode__calculateLayoutFixedStage1_closure0()) : root)._height;
          t1.toString;
          t2 = _this._top;
          t2.toString;
          t3 = _this._bottom;
          t3.toString;
          t3 = t1 - t2 - t3;
          _this._calculatedHeight = t3;
          rect.endY = rect.startY + t3;
        }
      }
    },
    _arrangeChildrenInRows$0: function() {
      var t2, t3, currentRow, t4, _i, node, t5, netRestWidth, rowRestWidth, occupiedWidth, _this = this,
        t1 = _this._rows;
      C.JSArray_methods.set$length(t1, 0);
      t2 = _this._rowWidth;
      t3 = type$.JSArray_LTelementNode;
      currentRow = new K.LTblockElementRow(t2, t2, H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t3));
      C.JSArray_methods.add$1(t1, currentRow);
      for (t2 = _this._children, t4 = t2.length, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        node = t2[_i];
        if (node._position !== C.Position_0)
          continue;
        switch (node._display) {
          case C.Display_0:
            if (currentRow.children.length !== 0) {
              currentRow.calculateWidthStage1$0();
              t5 = _this._rowWidth;
              currentRow = new K.LTblockElementRow(t5, t5, H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t3));
            }
            netRestWidth = _this._rowWidth - node._margin_left - node._margin_right;
            if (node._fillRowWidth)
              node.set$_calculatedWidth(Math.min(netRestWidth, node._maxWidth));
            currentRow.restWidth = netRestWidth - node._calculatedWidth;
            C.JSArray_methods.add$1(currentRow.children, node);
            C.JSArray_methods.add$1(t1, currentRow);
            t5 = _this._rowWidth;
            currentRow = new K.LTblockElementRow(t5, t5, H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t3));
            C.JSArray_methods.add$1(t1, currentRow);
            break;
          case C.Display_1:
            rowRestWidth = currentRow.restWidth;
            if (node._fillRowWidth) {
              if (!currentRow.addFreeNode$1(node)) {
                currentRow.calculateWidthStage1$0();
                t5 = _this._rowWidth;
                currentRow = new K.LTblockElementRow(t5, t5, H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t3));
                currentRow.addFreeNode$1(node);
                C.JSArray_methods.add$1(t1, currentRow);
              }
            } else {
              occupiedWidth = node._calculatedWidth + node._margin_left + node._margin_right;
              if (rowRestWidth < occupiedWidth) {
                rowRestWidth = _this._rowWidth - occupiedWidth;
                currentRow.calculateWidthStage1$0();
                t5 = H.setRuntimeTypeInfo([], t3);
                currentRow = new K.LTblockElementRow(rowRestWidth, rowRestWidth, t5, H.setRuntimeTypeInfo([], t3));
                C.JSArray_methods.add$1(t5, node);
                C.JSArray_methods.add$1(t1, currentRow);
              } else {
                currentRow.restWidth = rowRestWidth - occupiedWidth;
                currentRow.freeWidth -= occupiedWidth;
                C.JSArray_methods.add$1(currentRow.children, node);
              }
            }
            break;
          case C.Display_2:
            return;
        }
      }
      if (currentRow.freeNode.length !== 0)
        currentRow.calculateWidthStage1$0();
    },
    _calculateHeightStage2$0: function() {
      var t1, t2, _i, row, _this = this;
      for (t1 = _this._rows, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        row = t1[_i];
        _this._calculatedRowHeightSum = _this._calculatedRowHeightSum + row.calcHeight$0();
      }
      t1 = _this._height;
      if (t1 != null)
        return t1;
      return C.JSInt_methods.clamp$2(_this._calculatedRowHeightSum + _this._padding_top + _this._padding_bottom + _this._border_top + _this._border_bottom, _this._minHeight, _this._maxHeight);
    },
    _calculateRelativePosition$0: function() {
      var remainedHeight, spacingHeight, _i, row, currentX, spacingWidth, t4, _i0, node, rect, t5, t6, t7, _this = this,
        t1 = _this._border_top,
        t2 = _this._padding_top,
        currentY = t1 + t2,
        t3 = _this._alignTracks;
      if (t3 !== C.Alignment_0) {
        remainedHeight = Math.max(0, _this._calculatedHeight - t2 - _this._padding_bottom - t1 - _this._border_bottom);
        switch (t3) {
          case C.Alignment_1:
            currentY += remainedHeight - _this._calculatedRowHeightSum;
            spacingHeight = 0;
            break;
          case C.Alignment_2:
            currentY += C.JSDouble_methods.round$0(remainedHeight / 2);
            spacingHeight = 0;
            break;
          case C.Alignment_3:
            spacingHeight = C.JSDouble_methods.round$0(remainedHeight / (_this._rows.length - 1));
            break;
          default:
            spacingHeight = 0;
        }
      } else
        spacingHeight = 0;
      for (t1 = _this._rows, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        row = t1[_i];
        currentX = _this._border_left + _this._padding_left;
        switch (_this._alignItems) {
          case C.Alignment_1:
            currentX += row.restWidth;
            spacingWidth = 0;
            break;
          case C.Alignment_2:
            currentX += C.JSDouble_methods.round$0(row.restWidth / 2);
            spacingWidth = 0;
            break;
          case C.Alignment_3:
            spacingWidth = C.JSDouble_methods.round$0(row.restWidth / (row.children.length - 1));
            break;
          default:
            spacingWidth = 0;
        }
        for (t3 = row.children, t4 = t3.length, _i0 = 0; _i0 < t4; ++_i0) {
          node = t3[_i0];
          rect = node._calculatedRelativeBoundingRect;
          t5 = _this._top;
          if (t5 != null)
            rect.startY = t5;
          switch (node._alignSelf) {
            case C.Alignment_0:
              rect.startY = currentY + node._margin_top;
              break;
            case C.Alignment_1:
              rect.startY = currentY + row.height - node._calculatedHeight - node._margin_bottom;
              break;
            case C.Alignment_2:
              rect.startY = currentY + C.JSDouble_methods.round$0((row.height - node._calculatedHeight) / 2);
              break;
          }
          t5 = rect.startX = 0;
          t6 = _this._left;
          if (t6 != null) {
            rect.startX = t6;
            t5 = t6;
          }
          t6 = node._margin_left;
          t5 += currentX + t6;
          rect.startX = t5;
          t7 = node._calculatedWidth;
          rect.endX = t5 + t7;
          rect.endY = rect.startY + node._calculatedHeight;
          currentX += t6 + node._margin_right + t7 + spacingWidth;
        }
        currentY += row.height + spacingHeight;
      }
      for (t1 = _this._children, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        if (node._position === C.Position_1) {
          rect = node._calculatedRelativeBoundingRect;
          t3 = _this._left;
          if (t3 != null)
            rect.startX = t3;
          if (_this._right != null) {
            t3 = _this._calculatedWidth;
            t4 = node._right;
            t4.toString;
            rect.endY = t3 - t4;
          }
          rect.startX = rect.endY - node._calculatedWidth;
        }
      }
    },
    _calculateAbsolutePosition$0: function() {
      var t2, _i, node, relativeRect, absoluteRect,
        t1 = this._calculatedAbsoluteBoundingRect,
        absoluteOriginX = t1.startX,
        absoluteOriginY = t1.startY;
      for (t1 = this._children, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        relativeRect = node._calculatedRelativeBoundingRect;
        absoluteRect = node._calculatedAbsoluteBoundingRect;
        if (node._position !== C.Position_2) {
          absoluteRect.startX = relativeRect.startX + absoluteOriginX;
          absoluteRect.startY = relativeRect.startY + absoluteOriginY;
          absoluteRect.endX = relativeRect.endX + absoluteOriginX;
          absoluteRect.endY = relativeRect.endY + absoluteOriginY;
        }
      }
    },
    stage0Update$0: function() {
      var tempWidth, _this = this;
      _this.stageToUpdate = 1;
      _this._rowWidth = _this._calculateRowWidth$0();
      tempWidth = _this._calculateWidthStage0$0();
      if (tempWidth !== _this._calculatedWidth) {
        _this._calculatedWidth = tempWidth;
        return true;
      }
      return false;
    },
    stage1Update$0: function() {
      var t1, t2, t3, t4, t5, _this = this;
      _this.stageToUpdate = 2;
      t1 = _this._position;
      if (t1 === C.Position_1 && _this._left != null && _this._right != null) {
        t1 = _this.parent._calculatedWidth;
        t2 = _this._left;
        t2.toString;
        t3 = _this._right;
        t3.toString;
        _this.set$_width(Math.max(0, t1 - t2 - t3));
        t3 = _this._width;
        t3.toString;
        t2 = _this._padding_left;
        t1 = _this._padding_right;
        t4 = _this._border_left;
        t5 = _this._border_right;
        _this.set$_rowWidth(Math.max(_this._rowWidth, t3 - t2 - t1 - t4 - t5));
      } else if (t1 === C.Position_2)
        _this._calculateLayoutFixedStage1$0();
      if (_this._display !== C.Display_2)
        _this._arrangeChildrenInRows$0();
    },
    stage2Update$0: function() {
      var tempHeight, _this = this;
      _this.stageToUpdate = 3;
      if (_this._bottom == null || _this._top == null) {
        tempHeight = _this._calculateHeightStage2$0();
        if (tempHeight !== _this._calculatedHeight) {
          _this._calculatedHeight = tempHeight;
          return true;
        }
      }
      return false;
    },
    stage3Update$0: function() {
      var t1, t2, t3, _this = this;
      _this.stageToUpdate = 4;
      if (_this._position === C.Position_1 && _this._bottom != null && _this._top != null) {
        t1 = _this.parent._calculatedHeight;
        t2 = _this._top;
        t2.toString;
        t3 = _this._bottom;
        t3.toString;
        _this.set$_height(Math.max(0, t1 - t2 - t3));
      }
      _this._calculateRelativePosition$0();
      _this._calculateAbsolutePosition$0();
    },
    removeChild$1: function(node) {
      var t1, t2, _i;
      if (C.JSArray_methods.remove$1(this._children, node)) {
        if (node._position === C.Position_0)
          for (t1 = this._rows, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            C.JSArray_methods.remove$1(t1[_i].children, node);
        this.stageToUpdate = 0;
        return true;
      }
      return false;
    },
    get$_hasLastArrived: function() {
      if (++this._arrivedTraces === this._children.length) {
        this._arrivedTraces = 0;
        return true;
      }
      return false;
    },
    traceUpTill$1: function(callBack) {
      var currentNode;
      type$.bool_Function_nullable_LTelementNode._as(callBack);
      for (currentNode = this; H.boolConversionCheck(callBack.call$1(currentNode));)
        currentNode = currentNode == null ? null : currentNode.parent;
      return currentNode;
    },
    traverseDown$1: function(callBack) {
      var children, t1, ret, temp, t2, _i, node, t3;
      type$.void_Function_nullable_LTelementNode._as(callBack);
      callBack.call$1(this);
      children = this._children;
      if (children.length === 0)
        return H.setRuntimeTypeInfo([this], type$.JSArray_LTelementNode);
      t1 = type$.JSArray_LTelementNode;
      ret = H.setRuntimeTypeInfo([], t1);
      for (; true; children = temp) {
        temp = H.setRuntimeTypeInfo([], t1);
        for (t2 = children.length, _i = 0; _i < children.length; children.length === t2 || (0, H.throwConcurrentModificationError)(children), ++_i) {
          node = children[_i];
          callBack.call$1(node);
          t3 = node._children;
          if (t3.length !== 0)
            C.JSArray_methods.addAll$1(temp, t3);
          else
            C.JSArray_methods.add$1(ret, node);
        }
        if (temp.length === 0)
          return ret;
      }
    },
    toString$0: function(_) {
      return "id: " + H.S(this.id) + ", left: " + this._calculatedAbsoluteBoundingRect.toString$0(0);
    },
    set$parent: function($parent) {
      this.parent = type$.nullable_LTelementNode._as($parent);
    },
    set$stageToUpdate: function(stageToUpdate) {
      this.stageToUpdate = H._asInt(stageToUpdate);
    },
    set$_width: function(_width) {
      this._width = H._asIntQ(_width);
    },
    set$_height: function(_height) {
      this._height = H._asIntQ(_height);
    },
    set$_calculatedWidth: function(_calculatedWidth) {
      this._calculatedWidth = H._asInt(_calculatedWidth);
    },
    set$_rowWidth: function(_rowWidth) {
      this._rowWidth = H._asInt(_rowWidth);
    }
  };
  K.LTelementNode__calculateLayoutFixedStage1_closure.prototype = {
    call$1: function(node) {
      return node.parent != null;
    },
    $signature: 3
  };
  K.LTelementNode__calculateLayoutFixedStage1_closure0.prototype = {
    call$1: function(node) {
      return node.parent != null;
    },
    $signature: 3
  };
  K.LTblockElementRow.prototype = {
    addFreeNode$1: function(node) {
      var _this = this,
        margin = node._margin_right + node._margin_left,
        occupiedWidth = node._calculatedWidth + margin,
        t1 = _this.restWidth;
      if (t1 < occupiedWidth)
        return false;
      _this.restWidth = t1 - occupiedWidth;
      _this.freeWidth -= margin;
      C.JSArray_methods.add$1(_this.children, node);
      C.JSArray_methods.add$1(_this.freeNode, node);
      return true;
    },
    calcHeight$0: function() {
      var t1, t2, ret, _i, node;
      for (t1 = this.children, t2 = t1.length, ret = 0, _i = 0; _i < t2; ++_i) {
        node = t1[_i];
        if (node._display === C.Display_2) {
          ret = Math.max(node._line_height, ret);
          continue;
        }
        ret = Math.max(node._calculatedHeight + node._margin_top + node._margin_bottom, ret);
      }
      return this.height = ret;
    },
    calculateWidthStage1$0: function() {
      var finished, _i, node, _this = this,
        t1 = _this.freeWidth,
        t2 = _this.freeNode,
        t3 = t2.length,
        avgWidth = t1 / t3;
      for (t1 = t3; true; t1 = t3) {
        _i = 0;
        while (true) {
          if (!(_i < t2.length)) {
            finished = true;
            break;
          }
          node = t2[_i];
          t3 = node._maxWidth;
          if (t3 < avgWidth) {
            node._calculatedWidth = t3;
            _this.freeWidth -= t3;
            C.JSArray_methods.remove$1(t2, node);
            finished = false;
            break;
          }
          t3 = node._minWidth;
          if (t3 > avgWidth) {
            node._calculatedWidth = t3;
            _this.freeWidth -= t3;
            C.JSArray_methods.remove$1(t2, node);
            finished = false;
            break;
          }
          node._calculatedWidth = C.JSDouble_methods.floor$0(avgWidth);
          t2.length === t1 || (0, H.throwConcurrentModificationError)(t2);
          ++_i;
        }
        if (finished)
          break;
        else {
          t1 = _this.freeWidth;
          t3 = t2.length;
          avgWidth = t1 / t3;
        }
      }
    }
  };
  E.Display.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  E.Position.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  E.Overflow.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  E.Alignment.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  T.Lucid.prototype = {
    reflowAt$1: function(atNode) {
      var target, t1, _box_0 = {};
      _box_0.currentNode = atNode;
      switch (atNode.stageToUpdate) {
        case 0:
          target = 1;
          break;
        case 1:
          target = 2;
          break;
        case 2:
          target = 3;
          break;
        case 3:
          target = 4;
          break;
        default:
          target = null;
          break;
      }
      if (target)
        c$0:
          for (; true;)
            switch (target) {
              case 1:
                _box_0.currentNode = _box_0.currentNode.traceUpTill$1(new T.Lucid_reflowAt_closure());
                target = 2;
                continue c$0;
              case 2:
                t1 = _box_0.currentNode.parent;
                if (t1 != null)
                  t1.stage1Update$0();
                K.LTelementNode_traverseUpTill(_box_0.currentNode.traverseDown$1(new T.Lucid_reflowAt_closure0()), new T.Lucid_reflowAt_closure1(), new T.Lucid_reflowAt_closure2(_box_0));
                if (_box_0.currentNode.stage2Update$0())
                  _box_0.currentNode = _box_0.currentNode.traceUpTill$1(new T.Lucid_reflowAt_closure3());
                target = 4;
                continue c$0;
              case 3:
                _box_0.currentNode = _box_0.currentNode.traceUpTill$1(new T.Lucid_reflowAt_closure4());
                target = 4;
                continue c$0;
              case 4:
                t1 = _box_0.currentNode.parent;
                if (t1 != null)
                  t1.stage3Update$0();
                _box_0.currentNode.traverseDown$1(new T.Lucid_reflowAt_closure5());
                break c$0;
            }
    },
    initializeLayout$0: function() {
      var t1 = this.rootNode,
        leaves = t1.traverseDown$1(new T.Lucid_initializeLayout_closure());
      K.LTelementNode_traverseUpTill(leaves, new T.Lucid_initializeLayout_closure0(), new T.Lucid_initializeLayout_closure1());
      t1.traverseDown$1(new T.Lucid_initializeLayout_closure2());
      K.LTelementNode_traverseUpTill(leaves, new T.Lucid_initializeLayout_closure3(), new T.Lucid_initializeLayout_closure4());
      t1.traverseDown$1(new T.Lucid_initializeLayout_closure5());
    }
  };
  T.Lucid_reflowAt_closure.prototype = {
    call$1: function(node) {
      return node.stage0Update$0() && node._position === C.Position_0;
    },
    $signature: 3
  };
  T.Lucid_reflowAt_closure0.prototype = {
    call$1: function(node) {
      node.stage1Update$0();
    },
    $signature: 2
  };
  T.Lucid_reflowAt_closure1.prototype = {
    call$1: function(node) {
      return node.stage2Update$0();
    },
    $signature: 2
  };
  T.Lucid_reflowAt_closure2.prototype = {
    call$1: function(node) {
      return node !== this._box_0.currentNode;
    },
    $signature: 3
  };
  T.Lucid_reflowAt_closure3.prototype = {
    call$1: function(node) {
      return node.stage2Update$0() && node._position === C.Position_0;
    },
    $signature: 3
  };
  T.Lucid_reflowAt_closure4.prototype = {
    call$1: function(node) {
      return node.stage2Update$0() && node._position === C.Position_0;
    },
    $signature: 3
  };
  T.Lucid_reflowAt_closure5.prototype = {
    call$1: function(node) {
      node.stage3Update$0();
    },
    $signature: 2
  };
  T.Lucid_initializeLayout_closure.prototype = {
    call$1: function(node) {
    },
    $signature: 2
  };
  T.Lucid_initializeLayout_closure0.prototype = {
    call$1: function(node) {
      return node.stage0Update$0();
    },
    $signature: 2
  };
  T.Lucid_initializeLayout_closure1.prototype = {
    call$1: function(node) {
      return true;
    },
    $signature: 3
  };
  T.Lucid_initializeLayout_closure2.prototype = {
    call$1: function(node) {
      node.stage1Update$0();
    },
    $signature: 2
  };
  T.Lucid_initializeLayout_closure3.prototype = {
    call$1: function(node) {
      return node.stage2Update$0();
    },
    $signature: 2
  };
  T.Lucid_initializeLayout_closure4.prototype = {
    call$1: function(node) {
      return true;
    },
    $signature: 3
  };
  T.Lucid_initializeLayout_closure5.prototype = {
    call$1: function(node) {
      node.stage3Update$0();
    },
    $signature: 2
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0;
    _static_2(N, "jsInternal__initializeRootNode$closure", "initializeRootNode", 14);
    _static_1(N, "jsInternal__addChild$closure", "addChild", 1);
    _static_1(N, "jsInternal__removeChild$closure", "removeChild", 5);
    _static_2(N, "jsInternal__setDisplay$closure", "setDisplay", 0);
    _static_1(N, "jsInternal__getDisplay$closure", "getDisplay", 1);
    _static_2(N, "jsInternal__setPosition$closure", "setPosition", 0);
    _static_1(N, "jsInternal__getPosition$closure", "getPosition", 1);
    _static_2(N, "jsInternal__setWidth$closure", "setWidth", 0);
    _static_1(N, "jsInternal__getWidth$closure", "getWidth", 4);
    _static_2(N, "jsInternal__setMinWidth$closure", "setMinWidth", 0);
    _static_1(N, "jsInternal__getMinWidth$closure", "getMinWidth", 1);
    _static_2(N, "jsInternal__setMaxWidth$closure", "setMaxWidth", 0);
    _static_1(N, "jsInternal__getMaxWidth$closure", "getMaxWidth", 1);
    _static_2(N, "jsInternal__setHeight$closure", "setHeight", 0);
    _static_1(N, "jsInternal__getHeight$closure", "getHeight", 4);
    _static_2(N, "jsInternal__setMinHeight$closure", "setMinHeight", 0);
    _static_1(N, "jsInternal__getMinHeight$closure", "getMinHeight", 1);
    _static_2(N, "jsInternal__setMaxHeight$closure", "setMaxHeight", 0);
    _static_1(N, "jsInternal__getMaxHeight$closure", "getMaxHeight", 1);
    _static_2(N, "jsInternal__setLine_height$closure", "setLine_height", 0);
    _static_1(N, "jsInternal__getLine_height$closure", "getLine_height", 1);
    _static_2(N, "jsInternal__setBorder_top$closure", "setBorder_top", 0);
    _static_1(N, "jsInternal__getBorder_top$closure", "getBorder_top", 1);
    _static_2(N, "jsInternal__setBorder_right$closure", "setBorder_right", 0);
    _static_1(N, "jsInternal__getBorder_right$closure", "getBorder_right", 1);
    _static_2(N, "jsInternal__setBorder_bottom$closure", "setBorder_bottom", 0);
    _static_1(N, "jsInternal__getBorder_bottom$closure", "getBorder_bottom", 1);
    _static_2(N, "jsInternal__setBorder_left$closure", "setBorder_left", 0);
    _static_1(N, "jsInternal__getBorder_left$closure", "getBorder_left", 1);
    _static_2(N, "jsInternal__setMargin_top$closure", "setMargin_top", 0);
    _static_1(N, "jsInternal__getMargin_top$closure", "getMargin_top", 1);
    _static_2(N, "jsInternal__setMargin_right$closure", "setMargin_right", 0);
    _static_1(N, "jsInternal__getMargin_right$closure", "getMargin_right", 1);
    _static_2(N, "jsInternal__setMargin_bottom$closure", "setMargin_bottom", 0);
    _static_1(N, "jsInternal__getMargin_bottom$closure", "getMargin_bottom", 1);
    _static_2(N, "jsInternal__setMargin_left$closure", "setMargin_left", 0);
    _static_1(N, "jsInternal__getMargin_left$closure", "getMargin_left", 1);
    _static_2(N, "jsInternal__setPadding_top$closure", "setPadding_top", 0);
    _static_1(N, "jsInternal__getPadding_top$closure", "getPadding_top", 1);
    _static_2(N, "jsInternal__setPadding_right$closure", "setPadding_right", 0);
    _static_1(N, "jsInternal__getPadding_right$closure", "getPadding_right", 1);
    _static_2(N, "jsInternal__setPadding_bottom$closure", "setPadding_bottom", 0);
    _static_1(N, "jsInternal__getPadding_bottom$closure", "getPadding_bottom", 1);
    _static_2(N, "jsInternal__setPadding_left$closure", "setPadding_left", 0);
    _static_1(N, "jsInternal__getPadding_left$closure", "getPadding_left", 1);
    _static_2(N, "jsInternal__setLeft$closure", "setLeft", 0);
    _static_1(N, "jsInternal__getLeft$closure", "getLeft", 4);
    _static_2(N, "jsInternal__setTop$closure", "setTop", 0);
    _static_1(N, "jsInternal__getTop$closure", "getTop", 4);
    _static_2(N, "jsInternal__setRight$closure", "setRight", 0);
    _static_1(N, "jsInternal__getRight$closure", "getRight", 4);
    _static_2(N, "jsInternal__setBottom$closure", "setBottom", 0);
    _static_1(N, "jsInternal__getBottom$closure", "getBottom", 4);
    _static_2(N, "jsInternal__setWrap$closure", "setWrap", 6);
    _static_1(N, "jsInternal__getWrap$closure", "getWrap", 7);
    _static_2(N, "jsInternal__setFit_content$closure", "setFit_content", 6);
    _static_1(N, "jsInternal__getFit_content$closure", "getFit_content", 7);
    _static_2(N, "jsInternal__setOverflow$closure", "setOverflow", 0);
    _static_1(N, "jsInternal__getOverflow$closure", "getOverflow", 1);
    _static_2(N, "jsInternal__setAlignTracks$closure", "setAlignTracks", 0);
    _static_1(N, "jsInternal__getAlignTracks$closure", "getAlignTracks", 1);
    _static_2(N, "jsInternal__setAlignItems$closure", "setAlignItems", 0);
    _static_1(N, "jsInternal__getAlignItems$closure", "getAlignItems", 1);
    _static_2(N, "jsInternal__setAlignSelf$closure", "setAlignSelf", 0);
    _static_1(N, "jsInternal__getAlignSelf$closure", "getAlignSelf", 1);
    _static_0(N, "jsInternal__initializeLayout$closure", "initializeLayout", 15);
    _static_1(N, "jsInternal__reflowAt$closure", "reflowAt", 5);
    _static_1(N, "jsInternal__getCalculatedWidth$closure", "getCalculatedWidth", 1);
    _static_1(N, "jsInternal__getCalculatedHeight$closure", "getCalculatedHeight", 1);
    _static_1(N, "jsInternal__getCalculatedBoundingRect$closure", "getCalculatedBoundingRect", 16);
    _static_1(N, "jsInternal__inspectRecursive$closure", "inspectRecursive", 5);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.Closure, H._Required, P.MapMixin, H.LinkedHashMapCell, H.Rti, H._FunctionParameters, P._UnmodifiableMapMixin, P.Null, P.StringBuffer, X.Rect, K.LTelementNode, K.LTblockElementRow, E.Display, E.Position, E.Overflow, E.Alignment, T.Lucid]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, W.DomException]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Error, [H.LateError, H.RuntimeError, P.AssertionError, H._Error, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inheritMany(H.Closure, [H.Primitives_functionNoSuchMethod_closure, H.TearOffClosure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P.MapBase_mapToString_closure, P.NoSuchMethodError_toString_closure, N.inspectRecursive_closure, K.LTelementNode__calculateLayoutFixedStage1_closure, K.LTelementNode__calculateLayoutFixedStage1_closure0, T.Lucid_reflowAt_closure, T.Lucid_reflowAt_closure0, T.Lucid_reflowAt_closure1, T.Lucid_reflowAt_closure2, T.Lucid_reflowAt_closure3, T.Lucid_reflowAt_closure4, T.Lucid_reflowAt_closure5, T.Lucid_initializeLayout_closure, T.Lucid_initializeLayout_closure0, T.Lucid_initializeLayout_closure1, T.Lucid_initializeLayout_closure2, T.Lucid_initializeLayout_closure3, T.Lucid_initializeLayout_closure4, T.Lucid_initializeLayout_closure5]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inherit(H._TypeError, H._Error);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~(int,int)", "int(int)", "~(LTelementNode?)", "bool(LTelementNode?)", "int?(int)", "~(int)", "~(int,bool)", "bool(int)", "~(String,@)", "@(@)", "@(@,String)", "@(String)", "~(Object?,Object?)", "~(Symbol0,@)", "int(int,int)", "~()", "Object(int)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"JavaScriptObject","PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JSBool":{"bool":[]},"JavaScriptObject":{"Function":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[]},"JSDouble":{"num":[]},"JSString":{"String":[]},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"JSInvocationMirror":{"Invocation":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"int":{"num":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"MapBase":2}'));
  0;
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      Function: findType("Function"),
      Invocation: findType("Invocation"),
      JSArray_LTblockElementRow: findType("JSArray<LTblockElementRow>"),
      JSArray_LTelementNode: findType("JSArray<LTelementNode>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_nullable_LTelementNode: findType("JSArray<LTelementNode?>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      List_dynamic: findType("List<@>"),
      Null: findType("Null"),
      Object: findType("Object"),
      Object_Function_int: findType("Object(int)"),
      String: findType("String"),
      Symbol: findType("Symbol0"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      bool: findType("bool"),
      bool_Function_int: findType("bool(int)"),
      bool_Function_nullable_LTelementNode: findType("bool(LTelementNode?)"),
      double: findType("double"),
      dynamic: findType("@"),
      int: findType("int"),
      int_Function_int: findType("int(int)"),
      int_Function_int_int: findType("int(int,int)"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_LTelementNode: findType("LTelementNode?"),
      nullable_Object: findType("Object?"),
      nullable_int_Function_int: findType("int?(int)"),
      num: findType("num"),
      void_Function: findType("~()"),
      void_Function_int: findType("~(int)"),
      void_Function_int_bool: findType("~(int,bool)"),
      void_Function_int_int: findType("~(int,int)"),
      void_Function_nullable_LTelementNode: findType("~(LTelementNode?)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Alignment_0 = new E.Alignment(0, "Alignment.start");
    C.Alignment_1 = new E.Alignment(1, "Alignment.end");
    C.Alignment_2 = new E.Alignment(2, "Alignment.center");
    C.Alignment_3 = new E.Alignment(3, "Alignment.space_between");
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C__Required = new H._Required();
    C.Display_0 = new E.Display(0, "Display.block");
    C.Display_1 = new E.Display(1, "Display.inline_block");
    C.Display_2 = new E.Display(2, "Display.inline");
    C.List_8eb = H.setRuntimeTypeInfo(makeConstList([C.Display_0, C.Display_1, C.Display_2]), H.findType("JSArray<Display>"));
    C.List_90K = H.setRuntimeTypeInfo(makeConstList([C.Alignment_0, C.Alignment_1, C.Alignment_2, C.Alignment_3]), H.findType("JSArray<Alignment>"));
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_dynamic);
    C.Position_0 = new E.Position(0, "Position.relative");
    C.Position_1 = new E.Position(1, "Position.absolute");
    C.Position_2 = new E.Position(2, "Position.fixed");
    C.List_kyy = H.setRuntimeTypeInfo(makeConstList([C.Position_0, C.Position_1, C.Position_2]), H.findType("JSArray<Position>"));
    C.Overflow_0 = new E.Overflow(0, "Overflow.hidden");
    C.Overflow_1 = new E.Overflow(1, "Overflow.visible");
    C.Overflow_2 = new E.Overflow(2, "Overflow.scroll");
    C.List_oGx = H.setRuntimeTypeInfo(makeConstList([C.Overflow_0, C.Overflow_1, C.Overflow_2]), H.findType("JSArray<Overflow>"));
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), H.findType("JSArray<Symbol0>"));
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty0, H.findType("ConstantStringMap<Symbol0,@>"));
    C.Symbol_call = new H.Symbol("call");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $.elements = H.setRuntimeTypeInfo([], type$.JSArray_nullable_LTelementNode);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "lucid", "$get$lucid", function() {
      return new T.Lucid(K.LTelementNode$(C.Display_0, null));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ApplicationCacheErrorEvent: J.Interceptor, DOMError: J.Interceptor, ErrorEvent: J.Interceptor, Event: J.Interceptor, InputEvent: J.Interceptor, SubmitEvent: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SensorErrorEvent: J.Interceptor, SpeechRecognitionError: J.Interceptor, SQLError: J.Interceptor, DOMException: W.DomException});
    hunkHelpers.setOrUpdateLeafTags({ApplicationCacheErrorEvent: true, DOMError: true, ErrorEvent: true, Event: true, InputEvent: true, SubmitEvent: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SensorErrorEvent: true, SpeechRecognitionError: true, SQLError: true, DOMException: true});
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = L.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=out.js.map
